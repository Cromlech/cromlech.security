Securing a component
********************

Securing a component is about checking one or several users against
arbitrary conditions, usually resulting in one of three outcomes :
the user is allowed, the user is not authenticated or the user doesn't
have the proper rights.

Let's get into details with a thorough example. We'll start with creating
the object to protect.

    >>> from zope.interface import Interface, implementer

    >>> class IDocument(Interface):
    ...     pass

    >>> @implementer(IDocument)
    ... class Document(object):
    ...     pass

    >>> doc = Document()

`cromlech.security` relies on an interface to start its checks:

    >>> from cromlech.security import IProtectedComponent

Our object needs to provide this interface or be adapted to it :

    >>> import pytest
    >>> from zope.interface.interfaces import ComponentLookupError

    >>> with pytest.raises(ComponentLookupError):
    ...    protector = IProtectedComponent(doc)


Currently, our object doesn't provide nor can be adapted to this interface.


Providing IProtectedComponent
-----------------------------

The `IProtectedComponent` only requires the implementation of a method
that takes an interaction as an argument (see "Real life example" below).

For now, this security method will only return Forbidden:

    >>> from cromlech.security import Forbidden

    >>> @implementer(IProtectedComponent)
    ... class DocumentProtector(object):
    ...
    ...     def __init__(self, doc):
    ...         self.doc = doc
    ...
    ...     def __check_security__(self, interaction):
    ...         return Forbidden


Now, we made an adapter. Let's register it :

    >>> from crom import implicit
    >>> implicit.registry.register(
    ...    (IDocument,), IProtectedComponent, '', DocumentProtector)


We can now adapt our document:

    >>> protector = IProtectedComponent(doc)
    >>> protector
    <...DocumentProtector object at ...>


Hooking the security check into lookups
---------------------------------------

This adapter doesn't do much on its own. Calling it manually won't help us
doing security at the app level. That's why we usually do the security checks
during lookups.

To help with that, `cromlech.security` provides a lookup decorator that
will do the adaptation for you and raise any error encountered :

    >>> from cromlech.security import component_protector

This decorator can wrap any method that effectively return the object.
It will pass along any kind of args and simply try to adapt the returned
object to IProtectedComponent and run `__check_security__`.

To test it, we need an interaction.
Interaction objects represent the security context of the current runtime.

Let's try it, without providing any ISecurityCheck components :

    >>> from cromlech.security import MissingSecurityContext

    >>> with pytest.raises(MissingSecurityContext):
    ...     component_protector(IProtectedComponent)(doc)

Now, we try with a valid interaction :

    >>> from cromlech.security import ContextualInteraction

    >>> with pytest.raises(Forbidden):
    ...     with ContextualInteraction():
    ...         component_protector(IProtectedComponent)(doc)


As expected, it raises Forbidden, as it's the only thing done by our
adapter.

Now that the inner workings are unraveled, let's implement a real life example
that actually make sense.


Real life example
-----------------

Let's wipe up our previous components and start fresh :

    >>> implicit.clear()
    >>> implicit.initialize()

In this example, we'll use the IProtectedComponent as a dispatcher, to
query and execute small atomic tests, via the ISecurityCheck interface.

    >>> from cromlech.security import ISecurityCheck

    >>> @implementer(IProtectedComponent)
    ... class DocumentProtector(object):
    ...
    ...     def __init__(self, doc):
    ...         self.doc = doc
    ...
    ...     def __check_security__(self, interaction):
    ...         checkers = ISecurityCheck.subscription(self.doc)
    ...         for checker in checkers:
    ...             error = checker(self.doc, interaction)
    ...             if error is not None:
    ...                return error
    ...         return None  # all was fine !

    >>> implicit.registry.register(
    ...    (IDocument,), IProtectedComponent, '', DocumentProtector)

    >>> with ContextualInteraction():
    ...     component_protector(IProtectedComponent)(doc)
    <....DocumentProtector object at ...>

Here we go ! The object is correctly returned. This is a first step, since
our security check does currently nothing at all.

We now need to implement the ISecurityCheck components.
We query them as subscriptions, so let create them and register them
as subscription:

   >>> from cromlech.security import unauthenticated_principal

    >>> def NoAnonymous(doc, interaction):
    ...     for principal in interaction.principals:
    ...         if principal is unauthenticated_principal:
    ...             return Forbidden

    >>> implicit.registry.subscribe((IDocument,), ISecurityCheck, NoAnonymous)


This very simple checker will make an error if our Interaction contains
an unauthenticated user. This will go wrong, since we do not provide any
user to our security context :

    >>> with pytest.raises(Forbidden):
    ...     with ContextualInteraction():
    ...         component_protector(IProtectedComponent)(doc)

All is well.
Let's provide a user, now, to be in the clear :

    >>> from cromlech.security import Principal
    >>> user = Principal('Manfred')

    >>> with ContextualInteraction(user):
    ...     component_protector(IProtectedComponent)(doc)
    <...DocumentProtector object at ...>

Et voilÃ .


Working with permissions
------------------------

Permissions in `cromlech.security` are very loose components.
They do not do anything nor provide any kind of security by their own.
They can be used as markers:

    >>> from cromlech.security import permissions

    >>> @permissions('View')
    ... @implementer(IDocument)
    ... class ViewDocument(object):
    ...     pass

    >>> viewdoc = ViewDocument()

Now, let's add a checker that will check for that permission:

    >>> def PermissionsCheck(doc, interaction):
    ...     """Check if all principals have all the permissions !
    ...     """
    ...     perms = set(permissions.get(doc) or [])
    ...     for principal in interaction.principals:
    ...         has_perms = set(getattr(principal, "permissions", []))
    ...         if not perms <= has_perms:
    ...             return Forbidden

    >>> implicit.registry.subscribe(
    ...     (IDocument,), ISecurityCheck, PermissionsCheck)


Let's check !

    >>> with ContextualInteraction(user):
    ...     component_protector(IProtectedComponent)(doc)
    <...DocumentProtector object at ...>

Nothing changed for our former doc, that has no permissions settings.
We can now check with the `viewdoc` that has permissions:

    >>> with pytest.raises(Forbidden):
    ...     with ContextualInteraction(user):
    ...         component_protector(IProtectedComponent)(viewdoc)

As expected, we are forbidden here.
Let's give our user a set of permissions !

    >>> user.permissions = set(('View', 'Edit', 'Post'))

Now, we retry and should be let in :

    >>> with ContextualInteraction(user):
    ...     component_protector(IProtectedComponent)(viewdoc)
    <...DocumentProtector object at ...>

You have now all the bricks to build your own security policy.


Advanced permission object
--------------------------

As a twisted but very handy usecase, we have the `IAutoResolvingPermission`.
It's a normalized way to provide a permission that is also an ISecurityCheck
object.

Let's wipe up our previous components and start fresh :

    >>> implicit.clear()
    >>> implicit.initialize()

We register a new DocumentProtector:

    >>> @implementer(IProtectedComponent)
    ... class DocumentProtector(object):
    ...
    ...     def __init__(self, doc):
    ...         self.doc = doc
    ...
    ...     def __check_security__(self, interaction):
    ...         perms = permissions.get(self.doc) or []
    ...         for permission in perms:
    ...             if IAutoResolvingPermission.providedBy(permission):
    ...                error = permission(self.doc, interaction)
    ...                if error is not None:
    ...                    return error
    ...         return None  # all was fine !

    >>> implicit.registry.register(
    ...    (IDocument,), IProtectedComponent, '', DocumentProtector)

Let's dissect this IAutoResolvingPermission:

    >>> from cromlech.security import IAutoResolvingPermission

    >>> @implementer(IAutoResolvingPermission)
    ... class NoManfred(object):
    ...     id = 'NoManfred'
    ...     title = 'Manfred is not welcome here'
    ...     description = 'Manfred should never be allowed through.'
    ...
    ...     @staticmethod
    ...     def __call__(doc, interaction):
    ...         for principal in interaction.principals:
    ...             if principal.id == 'Manfred':
    ...                 return Forbidden

Now, we create a document that will be protected by this permission:

    >>> @permissions(NoManfred())
    ... @implementer(IDocument)
    ... class PublicDocumentExceptForManfred(object):
    ...     pass

    >>> no_manfred_doc = PublicDocumentExceptForManfred()

Let's run this using the user Manfred :

    >>> manfred = Principal('Manfred')
    >>> with pytest.raises(Forbidden):
    ...     with ContextualInteraction(manfred):
    ...         component_protector(IProtectedComponent)(no_manfred_doc)

Manfred is denied access !
Let's try with another user, August:

    >>> august = Principal('August')
    >>> with ContextualInteraction(august):
    ...     component_protector(IProtectedComponent)(no_manfred_doc)
    <...DocumentProtector object at ...>


If the interaction has both August and Manfred, we're still denied :

    >>> with pytest.raises(Forbidden):
    ...     with ContextualInteraction(manfred, august):
    ...         component_protector(IProtectedComponent)(no_manfred_doc)
